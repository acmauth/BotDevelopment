package org.acm.auth.commands;

import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;

/**
 * Represents a command supported by the bot.
 */
public abstract class Command {
    private final String name;
    private final String description;
    private final boolean guildOnly;
    private final String[] alias;
    private final int minArgs;
    private final int maxArgs;
    private final String usage;
    private final Permission[] botPerms;
    private final Permission[] usrPerms;

    // static array for empty permissions to be used in the default constructor
    protected static final Permission[] EMPTY_PERMS = {};

    /**
     * Constructs a command with default values for minimum arguments, maximum arguments, usage, bot and user
     * permissions.
     * @param name the name of the command as {@link String}
     * @param description the description of the command as {@link String}
     * @param guildOnly whether this command can only be executed in servers (guilds) as {@code boolean}
     * @param alias array of {@link String} objects representing the possible alternate labels that invoke the command
     */
    public Command(String name, String description, boolean guildOnly, String[] alias) {
        this.name = name;
        this.description = description;
        this.guildOnly = guildOnly;
        this.alias = alias;
        this.minArgs = 0;                   // no minimum args
        this.maxArgs = Integer.MAX_VALUE;   // maximum number of possible supported arguments
        this.usage = "";                    // no usage, the command does not need any parameters
        this.botPerms = EMPTY_PERMS;        // no required permissions for the bot
        this.usrPerms = EMPTY_PERMS;        // no required permission for the user
    }

    /**
     * Constructs a command with the provided values.
     * @param name the name of the command as {@link String}
     * @param description the description of the command as {@link String}
     * @param guildOnly whether this command can only be executed in servers (guilds) as {@code boolean}
     * @param alias array of {@link String} objects representing the possible alternate labels that invoke the command
     * @param minArgs minimum amount of arguments required as {@code int}
     * @param maxArgs maximum amount of arguments allowed as {@code int}
     * @param usage template for the command's usage explaining what each parameter means as {@code String}
     * @param botPerms array of {@link Permission} objects representing the required permissions the bot has to have
     * @param usrPerms array of {@link Permission} objects representing the required permissions the user has to have
     */
    public Command(String name, String description, boolean guildOnly, String[] alias, int minArgs, int maxArgs, String usage, Permission[] botPerms, Permission[] usrPerms) {
        this.name = name;
        this.description = description;
        this.guildOnly = guildOnly;
        this.alias = alias;
        this.minArgs = minArgs;
        this.maxArgs = maxArgs;
        this.usage = usage;
        this.botPerms = botPerms;
        this.usrPerms = usrPerms;
    }

    /**
     * Executes the actions the command does.
     * @param event the {@link MessageReceivedEvent} generated by JDA
     * @param args an array of {@link String} objects containing the arguments the user typed in Discord client
     */
    public abstract void invoke(MessageReceivedEvent event, String[] args);

    /**
     * Return's the name of the command
     * @return the name of the command as {@link String}
     */
    public String getName() {
        return name;
    }

    /**
     * Return's a description about what the command does
     * @return the description as {@code String}
     */
    public String getDescription() {
        return description;
    }

    /**
     * Whether this command can only be executed in servers
     * @return {@code boolean}
     */
    public boolean isGuildOnly() {
        return guildOnly;
    }

    /**
     * Return's the possible alternate labels that invoke the command
     * @return the possible alternate labels as array of {@link String}
     */
    public String[] getAlias() {
        return alias;
    }

    /**
     * Return's the minimum amount of arguments required
     * @return {@code int}
     */
    public int getMinArgs() {
        return minArgs;
    }

    /**
     * Return's the maximum amount of arguments allowed
     * @return {@code int}
     */
    public int getMaxArgs() {
        return maxArgs;
    }

    /**
     * Return's a template for the command's usage, explaining what each parameter means
     * @return the template as {@link String}
     */
    public String getUsage() {
        return usage;
    }

    /**
     * Return's the required permissions that the bot has to have
     * @return the permissions as array of {@link Permission}
     */
    public Permission[] getBotPerms() {
        return botPerms;
    }

    /**
     * Return's the required permissions that the user has to have
     * @return the permissions as array of {@link Permission}
     */
    public Permission[] getUsrPerms() {
        return usrPerms;
    }
}
