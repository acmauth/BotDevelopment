package org.acm.auth.commands;

import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

public class SubmitFunctionCommand extends Command{

    //because Hardcoding is a good practice
    String SUBMITIONS_CHANNEL = "963910999751147580";
    String DOC_ID = "955908180121100330";
    String DIVIDER_ID = "963912283061375056";


     /*
        FOR DEBUG USE ONLY
     */
//    String SUBMITIONS_CHANNEL = "963903242541088848";
//    String DOC_ID = "963903161570033674";
//    String DIVIDER_ID = "963912715930316850";

    public SubmitFunctionCommand() {
        super("submit", "Make a submission for Days of Coding", true, new String[] {});
    }

    /**
     * Executes the actions the command does.
     *
     * @param event the {@link MessageReceivedEvent} generated by JDA
     * @param args  an array of {@link String} objects containing the arguments the user typed in Discord client
     */
    @Override
    public void invoke(MessageReceivedEvent event, String[] args) {
        var message = event.getMessage();
        var category = message.getCategory();
        String category_Id = category.getId();


        if (!category_Id.equals(DOC_ID)){
            error(message);
            return;
        }

        ArrayList<String> valid_channels = new ArrayList<>();
        boolean f = false;
        var channels = category.getChannels();

        for (var channel : channels) {
            if (f) {
                valid_channels.add(channel.getId());
            }
            if (channel.getId().equals(DIVIDER_ID)) {
                f = true;
            }
        }

        if (!valid_channels.contains(message.getChannel().getId())){
            error(message);
            return;
        }

        var attatchments = message.getAttachments();
        if (attatchments.isEmpty()){
            message.reply(  "You seem to have forgotten to attach a file\n" +
                    "If you think this is an error, please contact a Moderator").queue();
            return;
        }

        // Assemble the relay message
        StringBuilder relay = new StringBuilder();

        String content = strip(message.getContentDisplay());
        String source = message.getChannel().getName() + " *(" + message.getChannel().getId() + ")*";
        String attatchment = message.getAttachments().get(0).getUrl();

        relay.append(source).append("\n")
                .append(content).append("\n")
                .append(attatchment);

        event.getGuild().getTextChannelById(SUBMITIONS_CHANNEL).sendMessage(relay).queue();

    }

    /*
    Strip the message body of the command call
     */
    private String strip(String input){
        final int indexOfSpace = input.indexOf(' ');

        if (indexOfSpace == -1) {
            return "";
        }

        return input.substring(indexOfSpace + 1);
    }


    /*
    If the message is sent in the wrong place, send a feedback message and remove the messages after 10s
    */
    private void error(Message message){
        message.reply( message.getAuthor().getAsMention() + " Hold on! This command is not allowed in here!\n" +
                "If you think this is an error, please contact a Moderator").queue(
                reply_message -> reply_message.delete().queueAfter(10, TimeUnit.SECONDS));
        message.delete().queue();
    }

}
